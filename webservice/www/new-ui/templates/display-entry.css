@import "/css/general.css";
@import "/new-ui/css-styles/rating-styles.css";

* {
    box-sizing: border-box;
}

hr {
    border-style: dashed;
    border-color: var(--text-color);
}

:host(display-entry) {
    --text-color: rgb(230 230 230);

    color: var(--text-color);

    flex-grow: 1;
    /*-10px just incase*/
    min-width: calc(50cqw - var(--gap-size) - 10px);

    overflow: auto auto;

    @container (aspect-ratio < 1) {
        width: 100%;
    }

    @container (width < 800px) {
        min-height: 50%;
    }

}


.root {
    width: 100%;
    height: 100%;
    container: entry / inline-size;
    border: 2px solid hsl(from var(--secondary) h s 30%);

    overflow: auto auto;
}

.thumbnail-fig {
    float: right;
    margin: 0;

    /*this way, everything in the middle of the page is cenetered nicely*/
    /*and the space to the right entirely belongs to the figure*/
    height: 90cqb;

    font-size: min(1em, 3cqw);

    max-width: 40cqw;
    overflow: auto auto;

    width: min-content;

    .thumbnail {
        box-shadow: 2px 2px 10px var(--blue);
        border: 1px solid var(--blue);
        align-self: center;

        width: 20cqw;

        cursor: pointer;
    }

    table {
        min-width: 20cqw;
    }

    hr {
        width: 100%;
        opacity: 50%;
        border-style: dotted;
    }
}

table {
    border-collapse: collapse;

    td,
    th {
        border: 1px solid hsl(from var(--text-color) h s calc(l * 0.5));
    }
}

#new-event-button {
    align-self: center;
    width: 50cqi;
}

/*if the table has events, we no longer need the new event button*/
.user-actions:has(*) + #new-event-button {
    display: none;
}

.tables .user-actions {
    width: 50cqw;

    text-align: center;

    counter-reset: event-no;

    .grid {
        grid-template-columns: 20% 1fr;
    }

    :is(td, th) {
        padding: 0.5em;
    }

    :is(td, th) button {
        width: fit-content;
        justify-self: center;
    }

    td:has(button) {
        text-align: center;
    }

    tr:has(button:is(:hover, :focus-visible)) {
        background: var(--secondary);
    }
}

.tables {
    gap: 10px;
    overflow: auto auto;

    table {
        width: 100%;
        margin: 0 auto;
        height: fit-content;

        td,
        th {
            border-color: hsl(from var(--text-color) h s calc(l * 0.5))
        }
    }

}

.header-subtitle {
    display: grid;
    gap: 1ex;

    font-size: 0.85em;

    text-align: center;

}

.actions {
    justify-content: center;

    margin: 3cap 0;

    --gap-size: 20px;

    /*There are a couple of flexboxes within here to group thigns together*/
    &.flex,
    & .flex {
        gap: var(--gap-size);
    }

    /* for some reason the 2 divs didn't have a gap */
    .flex:not(:last-of-type) {
        margin-right: var(--gap-size);
    }
}

.action {
    font-size: 1.2rem;
    aspect-ratio: 1 / 1;
}

div:has(> .close) {
    float: left;
    gap: 20px;

    margin: 0.4em 0 0 0.4em;

    button {
        aspect-ratio: 1 / 1;
        height: 3cap;
    }
}

.delete {
    color: var(--red);
}

.notes:empty::before {
    content: "Edit me!";
    opacity: 50%;
}

.descriptors {
    display: block
    /**/
    /* @media (orientation: landscape) { */
    /*     grid-auto-flow: row; */
    /* } */
    /**/
    /* @media (orientation: portrait) { */
    /*     display: block; */
    /* } */
}

hgroup {
    clear: left;

    > * {
        text-wrap: balance;
    }
}

.title:not([data-format-name="UNOWNED"])[data-format-name]::after {
    text-transform: lowercase;
    content: " (on " attr(data-format-name)")";
}

.title[data-format-name="UNOWNED"]::after {
    text-transform: lowercase;
    content: " (unowned)";
}

.title::before {
    content: attr(data-type-icon) " ";
}

:host(display-entry:not([data-user-status="Viewing"])) figure.entry-progress figcaption {
    display: none;
}

figure.entry-progress {
    justify-self: center;
    width: 25cqw;
    margin-top: 0;

    .view-count::before {
        content: "Viewed: "
    }

    .view-count::after {
        content: " times (" attr(data-time-spent, "Unknown") " hours)"
    }

    figcaption {
        line-height: 0;
        margin-top: -1cap;
        text-align: right;
        margin-right: calc(1ch);

        color: var(--secondary);
    }
}

progress:where(:not([max]), [value="0"]) {
    display: none;

    /*this figcaption displays the x/y for how far along the user is*/
    &~figcaption {
        display: none;
    }
}

progress {
    background: var(--blue);
    width: 100%;
}

progress[max]::-moz-progress-bar,
progress[max]::-webkit-progress-bar {
    background: var(--green);
}

#identify-items:popover-open {
    display: flex;
    flex-wrap: wrap;
}

:is(.descendants, .copies) div {
    display: flex;
    flex-wrap: wrap;

    gap: 2em;

    button {
        padding: 0.5em;
    }

    img {
        width: 10cqi;
    }
}
